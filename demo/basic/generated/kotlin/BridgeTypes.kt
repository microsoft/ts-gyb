/*
 * Copyright (c) 2021.
 * Microsoft Corporation. All rights reserved.
 *
 *
 * This file is automatically generated
 * Please DO NOT modify
*/

package com.microsoft.office.outlook.rooster.web.bridge

import java.lang.reflect.Type
import com.google.gson.JsonDeserializationContext
import com.google.gson.JsonDeserializer
import com.google.gson.JsonElement
import com.google.gson.JsonPrimitive
import com.google.gson.JsonSerializationContext
import com.google.gson.JsonSerializer
import com.google.gson.annotations.SerializedName


data class OverriddenFullSize(
    @JvmField val size: Float,
    @JvmField val count: Int,
    @JvmField val stringEnum: StringEnum,
    @JvmField val numEnum: NumEnum,
    @JvmField val defEnum: DefaultEnum,
    @JvmField val stringUnion: OverriddenFullSizeMembersStringUnionType,
    @JvmField val numberStringUnion: OverriddenFullSizeMembersNumberStringUnionType,
    @JvmField val nullableStringUnion: OverriddenFullSizeMembersNullableStringUnionType?,
    @JvmField val numUnion1: OverriddenFullSizeMembersNumUnion1Type,
    @JvmField val foo: OverriddenFullSizeMembersFooType,
    @JvmField val unionType: OverriddenFullSizeMembersUnionTypeType,
    @JvmField val width: Float,
    @JvmField val height: Float,
    @JvmField val scale: Float,
    @JvmField val member: NumEnum = NumEnum.ONE,
)

enum class NumEnum(val value: Int) {
    DEFAULT(0),
    ONE(1),
    TWO(2);

    companion object {
        fun find(value: Int) = values().find { it.value == value }
    }
}

class NumEnumTypeAdapter : JsonSerializer<NumEnum>, JsonDeserializer<NumEnum> {
    override fun serialize(obj: NumEnum, type: Type, context: JsonSerializationContext): JsonElement {
        return JsonPrimitive(obj.value)
    }

    override fun deserialize(json: JsonElement, type: Type, context: JsonDeserializationContext): NumEnum? {
        return NumEnum.find(json.asInt)
    }
}

enum class StringEnum {
    @SerializedName("default") DEFAULT,
    @SerializedName("a") A,
    @SerializedName("b") B
}

enum class DefaultEnum(val value: Int) {
    DEFAULT(0),
    DEFAULT_VALUE_C(1),
    DEFAULT_VALUE_D(2);

    companion object {
        fun find(value: Int) = values().find { it.value == value }
    }
}

class DefaultEnumTypeAdapter : JsonSerializer<DefaultEnum>, JsonDeserializer<DefaultEnum> {
    override fun serialize(obj: DefaultEnum, type: Type, context: JsonSerializationContext): JsonElement {
        return JsonPrimitive(obj.value)
    }

    override fun deserialize(json: JsonElement, type: Type, context: JsonDeserializationContext): DefaultEnum? {
        return DefaultEnum.find(json.asInt)
    }
}

enum class OverriddenFullSizeMembersStringUnionType {
    @SerializedName("A1") A1,
    @SerializedName("B1") B1
}

enum class OverriddenFullSizeMembersNumberStringUnionType {
    @SerializedName("11") _11,
    @SerializedName("21") _21
}

enum class OverriddenFullSizeMembersNullableStringUnionType {
    @SerializedName("A1") A1,
    @SerializedName("B1") B1
}

enum class OverriddenFullSizeMembersNumUnion1Type(val value: Int) {
    _11(11),
    _21(21);

    companion object {
        fun find(value: Int) = values().find { it.value == value }
    }
}

class OverriddenFullSizeMembersNumUnion1TypeTypeAdapter : JsonSerializer<OverriddenFullSizeMembersNumUnion1Type>, JsonDeserializer<OverriddenFullSizeMembersNumUnion1Type> {
    override fun serialize(obj: OverriddenFullSizeMembersNumUnion1Type, type: Type, context: JsonSerializationContext): JsonElement {
        return JsonPrimitive(obj.value)
    }

    override fun deserialize(json: JsonElement, type: Type, context: JsonDeserializationContext): OverriddenFullSizeMembersNumUnion1Type? {
        return OverriddenFullSizeMembersNumUnion1Type.find(json.asInt)
    }
}

data class OverriddenFullSizeMembersFooType(
    @JvmField val stringField: String,
    @JvmField val numberField: Float,
)

sealed class OverriddenFullSizeMembersUnionTypeType(val value: Any) {
    data class NumEnumValue(val value: NumEnum) : OverriddenFullSizeMembersUnionTypeType()
    data class DefaultEnumValue(val value: DefaultEnum) : OverriddenFullSizeMembersUnionTypeType()
    data class StringArrayValue(val value: Array<String>) : OverriddenFullSizeMembersUnionTypeType()
    data class StringForStringDictionaryValue(val value: Map<String, String>) : OverriddenFullSizeMembersUnionTypeType()
    data class BooleanValue(val value: Boolean) : OverriddenFullSizeMembersUnionTypeType()
    data class FloatValue(val value: Float) : OverriddenFullSizeMembersUnionTypeType()
    data class StringValue(val value: String) : OverriddenFullSizeMembersUnionTypeType()
}

class OverriddenFullSizeMembersUnionTypeTypeAdapter : JsonSerializer<OverriddenFullSizeMembersUnionTypeType>, JsonDeserializer<OverriddenFullSizeMembersUnionTypeType> {
    override fun serialize(src: OverriddenFullSizeMembersUnionTypeType, typeOfSrc: Type, context: JsonSerializationContext): JsonElement {
        return context.serialize(src.value)
    }
 
    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): OverriddenFullSizeMembersUnionTypeType {
        try {
            return OverriddenFullSizeMembersUnionTypeType.NumEnumValue(context.deserialize(json, NumEnum::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }
        try {
            return OverriddenFullSizeMembersUnionTypeType.DefaultEnumValue(context.deserialize(json, DefaultEnum::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }
        try {
            return OverriddenFullSizeMembersUnionTypeType.StringArrayValue(context.deserialize(json, Array<String>::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }
        try {
            return OverriddenFullSizeMembersUnionTypeType.StringForStringDictionaryValue(context.deserialize(json, Map<String, String>::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }
        try {
            return OverriddenFullSizeMembersUnionTypeType.BooleanValue(context.deserialize(json, Boolean::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }
        try {
            return OverriddenFullSizeMembersUnionTypeType.FloatValue(context.deserialize(json, Float::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }
        try {
            return OverriddenFullSizeMembersUnionTypeType.StringValue(context.deserialize(json, String::class.java))
        } catch (e: Exception) {
            // Ignore the exception and try the next type
        }

        throw IllegalArgumentException("Unexpected JSON type: ${json.javaClass}")
    }
}
