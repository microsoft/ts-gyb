/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 *
 *
 * This file is automatically generated
 * Please DO NOT modify
*/

package com.microsoft.tscodegen.demo.minieditor.generated

import com.google.gson.Gson
import android.webkit.WebView

interface EditorBridgeInterface {
    fun toggleBold()
    fun toggleItalic()
    fun toggleUnderline()
    fun clear()
    fun insertContent(content: String, newLine: Boolean?, callback: (InsertContentResult) -> Unit)
}

open class EditorBridge(private val webView: WebView, private val gson: Gson) : EditorBridgeInterface {

    override fun toggleBold() {
        val javascriptString = "editor.toggleBold()"
        println("[ts-gyb] evaluating JavaScript: $javascriptString")
        webView.evaluateJavascript(javascriptString){ evaluationResult -> 
            println("[ts-gyb] JavaScript result: $evaluationResult")
        }
    }

    override fun toggleItalic() {
        val javascriptString = "editor.toggleItalic()"
        println("[ts-gyb] evaluating JavaScript: $javascriptString")
        webView.evaluateJavascript(javascriptString){ evaluationResult -> 
            println("[ts-gyb] JavaScript result: $evaluationResult")
        }
    }

    override fun toggleUnderline() {
        val javascriptString = "editor.toggleUnderline()"
        println("[ts-gyb] evaluating JavaScript: $javascriptString")
        webView.evaluateJavascript(javascriptString){ evaluationResult -> 
            println("[ts-gyb] JavaScript result: $evaluationResult")
        }
    }

    override fun clear() {
        val javascriptString = "editor.clear()"
        println("[ts-gyb] evaluating JavaScript: $javascriptString")
        webView.evaluateJavascript(javascriptString){ evaluationResult -> 
            println("[ts-gyb] JavaScript result: $evaluationResult")
        }
    }

    data class Args_insertContent (
        val content: String,
        val newLine: Boolean?,
    )
    override fun insertContent(content: String, newLine: Boolean?, callback: (InsertContentResult) -> Unit) {
        val args = Args_insertContent(
            content,
            newLine
        )
        val jsonString = gson.toJson(args, Args_insertContent::class.java)
        val javascriptString = "editor.insertContent($jsonString)"
        println("[ts-gyb] evaluating JavaScript: $javascriptString")
        webView.evaluateJavascript(javascriptString){ evaluationResult -> 
            val result = gson.fromJson(evaluationResult, InsertContentResult::class.java)
            callback(result)
        }
    }
}

data class InsertContentResult(
    @JvmField val html: String,
)
