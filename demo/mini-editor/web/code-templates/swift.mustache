//
//  Copyright (c) Microsoft Corporation. All rights reserved.
//

// swiftformat:disable redundantRawValues
// Don't modify this file manually, it's auto generated.

import WebKit

public class {{moduleName}} {
  {{#customTags.privateDispatcher}}private {{/customTags.privateDispatcher}}weak var webView: WKWebView?

  private let jsonEncoder = JSONEncoder()
  private let jsonDecoder = JSONDecoder()

  init(webView: WKWebView) {
    self.webView = webView
  }
  {{#methods}}

  {{#documentationLines}}
  ///{{{.}}}
  {{/documentationLines}}
  public func {{methodName}}({{parametersDeclaration}}{{#parametersDeclaration.length}}, {{/parametersDeclaration.length}}completion: {{#returnType}}@escaping (Result<{{returnType}}, Error>) -> Void{{/returnType}}{{^returnType}}((Result<Void, Error>) -> Void)? = nil{{/returnType}}) {
    {{#parameters.length}}
    struct Args: Encodable {
      {{#parameters}}
      let {{name}}: {{type}}
      {{/parameters}}
    }
    {{/parameters.length}}
    {{#parameters.length}}
    let args = Args(
      {{#parameters}}
      {{name}}: {{name}}{{^last}},{{/last}}
      {{/parameters}}
    )
    let argsString = String(data: try! jsonEncoder.encode(args), encoding: .utf8)!
    {{/parameters.length}}
    let javaScriptString = "{{customTags.invokePath}}.{{methodName}}" + "(" {{#parameters.length}}+ "\(argsString)"{{/parameters.length}} + ")"

    print("[ts-codegen] evaluating: \(javaScriptString)")

    webView?.evaluateJavaScript(javaScriptString) { {{#returnType}}[unowned self]{{/returnType}}evaluationResult, error in
      {{^returnType}}
      guard let completion = completion else { return }
      {{/returnType}}
      if let error = error {
        completion(.failure(error))
        return
      }
      {{#returnType}}
      let data = try! JSONSerialization.data(withJSONObject: evaluationResult!)
      let result = try! self.jsonDecoder.decode({{returnType}}.self, from: data)
      completion(.success(result))
      {{/returnType}}
      {{^returnType}}
      completion(.success(()))
      {{/returnType}}
    }
  }
  {{/methods}}
}
{{#associatedTypes}}

{{> swift-named-type}}
{{/associatedTypes}}
