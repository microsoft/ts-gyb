{{#custom}}
data class {{typeName}}(
    {{#members}}
    @JvmField val {{name}}: {{type}}{{#defaultValue}} = {{defaultValue}}{{/defaultValue}},
    {{/members}}
    {{#staticMembers}}
    @JvmField val {{name}}: {{type}} = {{{value}}},
    {{/staticMembers}}
)
{{/custom}}
{{#enum}}
{{#isNumberType}}
enum class {{typeName}}(val value: Int) {
    {{#members}}
    {{key}}({{{value}}}){{^last}},{{/last}}{{#last}};{{/last}}
    {{/members}}

    companion object {
        fun find(value: Int) = values().find { it.value == value }
    }
}

class {{typeName}}TypeAdapter : JsonSerializer<{{typeName}}>, JsonDeserializer<{{typeName}}> {
    override fun serialize(obj: {{typeName}}, type: Type, context: JsonSerializationContext): JsonElement {
        return JsonPrimitive(obj.value)
    }

    override fun deserialize(json: JsonElement, type: Type, context: JsonDeserializationContext): {{typeName}}? {
        return {{typeName}}.find(json.asInt)
    }
}
{{/isNumberType}}
{{#isStringType}}
enum class {{typeName}} {
    {{#members}}
    @SerializedName({{{value}}}) {{key}}{{^last}},{{/last}}
    {{/members}}
}
{{/isStringType}}
{{/enum}}
{{#unionType}}
sealed class {{typeName}}(val value: Any) {
    {{#members}}
    data class {{type}}Value(val value: {{{type}}}) : {{typeName}}()
    {{/members}}
}

class {{typeName}}Adapter : JsonSerializer<{{typeName}}>, JsonDeserializer<{{typeName}}> {
    override fun serialize(src: {{typeName}}, typeOfSrc: Type, context: JsonSerializationContext): JsonElement {
        return context.serialize(src.value)
    }
 
    override fun deserialize(json: JsonElement, typeOfT: Type, context: JsonDeserializationContext): {{typeName}} {
        when {
            {{#hasBasicType}}
            json.isJsonPrimitive -> {
                val primitive = json.asJsonPrimitive
                {{#members}}
                {{#isNumber}}
                if (primitive.isNumber) {
                    return {{typeName}}.{{type}}Value(primitive.asFloat)
                }
                {{/isNumber}}
                {{#isBoolean}}
                if (primitive.isBoolean) {
                    return {{typeName}}.{{type}}Value(primitive.asBoolean)
                }
                {{/isBoolean}}
                {{#isString}}
                if (primitive.isString) {
                    return {{typeName}}.{{type}}Value(primitive.asString)
                }
                {{/isString}}
                {{/members}}
            }
            {{/hasBasicType}}
            {{#hasTupleType}}
            json.isJsonObject -> {
                {{#members}}
                {{#isTuple}}
                try {
                    return {{typeName}}.{{type}}Value(context.deserialize(json, {{type}}::class.java))
                } catch (e: Exception) {
                    // Ignore the exception and try the next type
                }
                {{/isTuple}}
                {{/members}}
            }
            {{/hasTupleType}}
            else -> throw IllegalArgumentException("Unexpected JSON type: ${json.javaClass}")
        }
    }
}
{{/unionType}}