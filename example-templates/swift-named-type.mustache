{{#custom}}
{{#documentationLines}}
///{{{.}}}
{{/documentationLines}}
public struct {{typeName}}: Codable {
  {{#members}}
  {{#documentationLines}}
  ///{{{.}}}
  {{/documentationLines}}
  public var {{name}}: {{type}}
  {{/members}}
  {{#staticMembers}}
  {{#documentationLines}}
  ///{{{.}}}
  {{/documentationLines}}
  private var {{name}}: {{type}} = {{{value}}}
  {{/staticMembers}}

  public init({{#members}}{{name}}: {{type}}{{#defaultValue}} = {{defaultValue}}{{/defaultValue}}{{^last}}, {{/last}}{{/members}}) {
    {{#members}}
    self.{{name}} = {{name}}
    {{/members}}
  }
}
{{/custom}}
{{#enum}}
{{#documentationLines}}
///{{{.}}}
{{/documentationLines}}
public enum {{typeName}}: {{valueType}}, Codable {
  {{#members}}
  {{#documentationLines}}
  ///{{{.}}}
  {{/documentationLines}}
  case {{key}} = {{{value}}}
  {{/members}}
}
{{/enum}}
{{#typeUnion}}
public enum {{typeName}}: Codable {
  {{#members}}
  case {{name}}(_ value: {{type}})
  {{/members}}

  public init(from decoder: any Decoder) throws {
    let container = try decoder.singleValueContainer()
    {{#members}}
    {{^last}}
    {{^first}}else {{/first}}if let value = try? container.decode({{type}}.self) {
      self = .{{name}}(value)
    } 
    {{/last}}
    {{#last}}
    else {
      let value = try container.decode({{type}}.self)
      self = .{{name}}(value)
    }
    {{/last}}
    {{/members}}
  }

  public func encode(to encoder: any Encoder) throws {
    var container = encoder.singleValueContainer()
    switch self {
    {{#members}}
    case .{{name}}(let value):
      try container.encode(value)
    {{/members}}
    }
  }
}
{{/typeUnion}}